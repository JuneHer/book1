name: Deploy Flask App with Secrets

on:
  push:
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Verify Terraform Installation
        run: |
          which terraform
          terraform version

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Plan
        run: terraform plan
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Get EC2 Instance IP
        id: get-ip
        run: |
          cd terraform
          terraform init
          # terraform output을 파일로 저장하고 파싱
          terraform output -raw instance_ip > /tmp/instance_ip.txt 2>/dev/null || true
          INSTANCE_IP=$(cat /tmp/instance_ip.txt | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' | head -1)
          if [ -z "$INSTANCE_IP" ]; then
            echo "Failed to get valid instance IP"
            echo "Raw output:"
            cat /tmp/instance_ip.txt || echo "No output file"
            exit 1
          fi
          echo "instance_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT
          echo "Instance IP: $INSTANCE_IP"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  ansible:
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Ansible
        run: sudo apt update && sudo apt install -y ansible

      - name: Set up Terraform for Ansible
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Get EC2 Instance IP from Terraform
        id: get-ip-ansible
        run: |
          cd terraform
          terraform init
          # terraform output을 파일로 저장하고 파싱
          terraform output -raw instance_ip > /tmp/instance_ip.txt 2>/dev/null || true
          INSTANCE_IP=$(cat /tmp/instance_ip.txt | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' | head -1)
          if [ -z "$INSTANCE_IP" ]; then
            echo "Failed to get valid instance IP"
            echo "Raw output:"
            cat /tmp/instance_ip.txt || echo "No output file"
            exit 1
          fi
          echo "instance_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT
          echo "Instance IP: $INSTANCE_IP"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Configure Ansible
        run: |
          mkdir -p ~/.ssh
          # Create SSH key from local file content
          cat > ~/.ssh/terraform-key.pem << 'EOF'
          -----BEGIN RSA PRIVATE KEY-----
          MIIEpAIBAAKCAQEAsfnyAPrutmmOOYdZP6QqrPthTQ/wkv7gbQeVG8Fg7S8noSHi
          dffUMxZY55p/OF+8LhAA0ab9pYY31gb2a96zPDs4VGXFle/FYHBUNOUM3br9Exa7
          PhbVqMZSsy9EIkpDtQ/yYf1P8A1cwEka8Ge2jZoe9w/8knpKUyOJkQdgz2TRmqXO
          fh2Rbm8BGLCG5Xt4oFWlPuTn5Rlc4c1Mm+BxXGQzNQ66ydvb9xzX9zWj17SzF1wf
          a6r3+uX2G9xZFCfoyjLtmnFYquZEcQmwOoAdZN53nz7vkhrOMVcZBohk0k7mJ7eB
          WHp29umn2GiVYiN22t1oyRdVwTHS82N1FNQ5pQIDAQABAoIBACSNhRqWbvif7Un7
          dmUPvoQQjQdawrouBsHd0M4GhXWxPZ5mazB3Wem0KUZIAOD/KJL9Tm3Ask+QpV8b
          xviYoI86SnNrA42r1QndiC3k7SONB/UnsgUqg29KbCnJB2FTh1xkjg96CzTuSaJk
          YVgGtQOYJ8vuSJ186E7y+YoDzepKHssPcw10poksPHCTw4RCmvXC6tLVAVjIKrJz
          M91GEDvaI5t9iLBgLgr74GxpSh0HR6H3vVf2EUBu0S6JMEe01+XVGuX1g34RWUWb
          UMEET+mY3zRm5p/k8z5aVZDuzAEWqvISmXsJB3Scv1yO7YjVRwQUOR+9W1YLIrQi
          IC7O1gECgYEA3+IU6BmLhDuISAzqQ3QYyDsTkyOwdEMdeHLl69E+asyzuxPci1o2
          NpCVBGz1LI+BtYBVdd+CHf6Oo+ZRxtL8G6QwndzcFbp96RdRMVaxvnBAkIqqFBcM
          Rp8tvxAf2z4IEOTJdqxYMhVh/pb9BDgxRpq+nIOvFbgXvsQROVRx6+ECgYEAy4H5
          2K6F9JdYu2OQUqhs0nifQRa4NtAiUj0wcb9psyToZXWyOE0D75d84enFtI5kWib5
          5PgzU7zkL33/ctFQ70GbIwZhk9EzMP7MFCWrNJ7JZ1KLXb91U4wfFSBlZoJ/92fz
          OTNZ/IASMsdFyvyz4lJRNtsn+4BYEU7NKxKkZkUCgYALPFRiRY3r5/Tx8Lv9AKGR
          wu07kCn127xp5BJH4GtqfrVyaQ/DapaX7G+eFj3Dq7wNuNARJ1NnX/QWo6Ns//+o
          /3d1JLVi3cYd4Y6wlDI9ZXLIDj103qc+EBUCprOClD1hY6n8q6+Na+dMGJXAFXXb
          nj58qlsqEuAWMc7Per5w4QKBgQChiyiAV3FgSi+WeJ9c7fOMU1HfgiBy6l8ENyxY
          buCB4z9TIs15IbGJJBBu6HoXLJz+b0gY+OkNhLkB9hur0fpUIhj7AZq9kuf28Zug
          NpKj75Pin8Sfg1aoHmeiBphXeioIg4ywEFJTPHq1sjd1vYkxk7SCPg+L9kJyYsI8
          eczknQKBgQDEBN2W06G0g4LJXI1P68tWU2pg9EkTj9dbLH5BHLt53b66J0hw0LVy
          B1iBEHHWVkQ1buGqv1SBkIOBg6iNNxrczM0eCaUlgpqx7WXuWNVsYaOq5Yo1nrsC
          qFGRXfxAhr235opJejX/lVSsX82ajtdeaGwWzNrVQ9741oeE4i/Miw==
          -----END RSA PRIVATE KEY-----
          EOF
          chmod 600 ~/.ssh/terraform-key.pem
          # Verify key format
          head -1 ~/.ssh/terraform-key.pem
          # Add EC2 instance to known_hosts
          ssh-keyscan -H ${{ steps.get-ip-ansible.outputs.instance_ip }} >> ~/.ssh/known_hosts

      - name: Update Ansible Inventory
        run: |
          # Update inventory with dynamic IP
          sed -i "s/PLACEHOLDER_IP/${{ steps.get-ip-ansible.outputs.instance_ip }}/" ansible/inventory.ini
          echo "Updated inventory.ini:"
          cat ansible/inventory.ini

      - name: Run Ansible Playbook
        run: ansible-playbook -i inventory.ini site.yml
        working-directory: ./ansible
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
