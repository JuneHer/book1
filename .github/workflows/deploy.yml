name: Deploy Flask App with Secrets

on:
  push:
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Verify Terraform Installation
        run: |
          which terraform
          terraform version

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Plan
        run: terraform plan
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Get EC2 Instance IP
        id: get-ip
        run: |
          cd terraform
          terraform init
          # terraform output을 파일로 저장하고 파싱
          terraform output -raw instance_ip > /tmp/instance_ip.txt 2>/dev/null || true
          INSTANCE_IP=$(cat /tmp/instance_ip.txt | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' | head -1)
          if [ -z "$INSTANCE_IP" ]; then
            echo "Failed to get valid instance IP"
            echo "Raw output:"
            cat /tmp/instance_ip.txt || echo "No output file"
            exit 1
          fi
          echo "instance_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT
          echo "Instance IP: $INSTANCE_IP"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  ansible:
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Ansible
        run: sudo apt update && sudo apt install -y ansible

      - name: Set up Terraform for Ansible
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Get EC2 Instance IP from Terraform
        id: get-ip-ansible
        run: |
          cd terraform
          terraform init
          # terraform output을 파일로 저장하고 파싱
          terraform output -raw instance_ip > /tmp/instance_ip.txt 2>/dev/null || true
          INSTANCE_IP=$(cat /tmp/instance_ip.txt | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' | head -1)
          if [ -z "$INSTANCE_IP" ]; then
            echo "Failed to get valid instance IP"
            echo "Raw output:"
            cat /tmp/instance_ip.txt || echo "No output file"
            exit 1
          fi
          echo "instance_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT
          echo "Instance IP: $INSTANCE_IP"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Configure Ansible
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/terraform-key.pem
          chmod 600 ~/.ssh/terraform-key.pem
          # Add EC2 instance to known_hosts
          ssh-keyscan -H ${{ steps.get-ip-ansible.outputs.instance_ip }} >> ~/.ssh/known_hosts

      - name: Update Ansible Inventory
        run: |
          # Update inventory with dynamic IP
          sed -i "s/PLACEHOLDER_IP/${{ steps.get-ip-ansible.outputs.instance_ip }}/" ansible/inventory.ini
          echo "Updated inventory.ini:"
          cat ansible/inventory.ini

      - name: Run Ansible Playbook
        run: ansible-playbook -i inventory.ini site.yml
        working-directory: ./ansible
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
